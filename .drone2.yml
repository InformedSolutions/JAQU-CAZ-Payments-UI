
  #################################################### DEV Steps ############################################################

kind: pipeline
type: docker
name: payments-web-dev
trigger:
  branch:
    - iac-restructure-baseline
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock


steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker:19.03.11-git
    commands:
    - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker image
  - name: build
    image: docker:19.03.11-git
    commands:
    - docker build -f Dockerfile.test -t test-payments-frontend:latest --build-arg secret_key_base=${DRONE_COMMIT} .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    build_args:
      - AWS_REGION=eu-west-2

  # Trigger unit tests
  - name: unit tests
    image: test-payments-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - yarn install
      - rspec -f d

  # Execute integration/scenario tests
  - name: integration tests
    image: test-payments-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - cucumber

  # Invoke static code analysis through Ruby libraries and assets (js + stylesheets)
  - name: static code analysis (Ruby + assets)
    image: test-payments-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - rubocop
      - scss-lint app/javascript

  # Invoke security analysis through Ruby libraries
  - name: security tests (Ruby)
    image: test-payments-frontend
    pull: never
    commands:
       - bundle audit check --update
       - yarn run improved-yarn-audit --exclude '1486' --retry-on-network-failure
       - brakeman --except Redirect,LinkToHref
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Push built image to ECR registry
  - name: publish image to ecr
    image: plugins/ecr
    settings:
      access_key:
        from_secret: jaqu_lower_service_aws_access_key_id
      secret_key:
        from_secret: jaqu_lower_service_aws_secret_access_key
      repo: 311075478274.dkr.ecr.eu-west-2.amazonaws.com/payments-web
      registry: 311075478274.dkr.ecr.eu-west-2.amazonaws.com
      dockerfile: Dockerfile.build
      region: eu-west-2
      tags:
        - latest
        - ${DRONE_BUILD_NUMBER}
      build_args:
        - secret_key_base=${DRONE_COMMIT}
        - aws_region=eu-west-2
    when:
      event:
        - push

  - name: sonar scan
    image: aosapps/drone-sonar-plugin
    environment:
      SONAR_HOST:
        from_secret: jaqu_lower_sonar_host
      SONAR_TOKEN:
        from_secret: jaqu_lower_sonar_token
      sonar.ruby.coverage.reportPaths: coverage/.resultset.json
    commands:
      - sonar-scanner
        -Dsonar.projectName=${DRONE_REPO}
        -Dsonar.host.url=$SONAR_HOST
        -Dsonar.login=$SONAR_TOKEN
        -Dproject.settings=./sonar-project.properties

  - name: deploy to dev
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout iac_restructure_baseline
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../04.web
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
    environment:
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base:
         from_secret: payments_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-5
      TF_VAR_access_key:
        from_secret: jaqu_lower_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_lower_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-lower
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
      TF_VAR_enable_https_redirect: false
      TF_VAR_feedback_url: https://www.surveymonkey.co.uk/r/TK6F8N6
    when:
      event:
        - push

  - name: codedeploy ui dev
    image: golang:alpine
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws deploy create-deployment --application-name $APPLICATION_NAME --deployment-config-name CodeDeployDefault.ECSAllAtOnce --deployment-group-name $DEPLOYMENT_GROUP --description "Deployment ECS" --s3-location bucket=$LAMBDA_BUCKET,bundleType=yaml,key=$PROJECT/dev/appspec.yaml --profile target_acc
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_lower_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_lower_aws_secret_access_key
      AWS_ACCOUNT_ROLE: arn:aws:iam::311075478274:role/jaqu-lowerServiceRole
      AWS_DEFAULT_REGION: eu-west-2
      APPLICATION_NAME: payments-codedeploy-service-dev
      DEPLOYMENT_GROUP: payments-codedeploy-service-dev
      PROJECT: payments
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  # Build docker image
  - name: await ecs rollout
    image: docker:19.03.11-git
    environment:
      build_id_url: https://dev2.paycleanairzonecharge.co.uk/build_id
      build_id: ${DRONE_BUILD_NUMBER}
    commands:
      - apk add curl
      - sh build_utils/check_build_number.sh
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push

  #   # Build pa11y-ci image
  # - name: build pa11y-ci image
  #   image: docker:19.03.11-git
  #   commands:
  #     - cd pa11y
  #     - docker build -t pa11y-ci .
  #   volumes:
  #     - name: docker_sock
  #       path: /var/run/docker.sock
  #    build_args:
  #      - AWS_REGION=eu-west-2
  #   when:
  #     event:
  #       - push
  #
  #  # Trigger accessibility test
  # - name: accessibility tests
  #   image: pa11y-ci
  #   pull: never
  #   environment:
  #     BASE_URL: https://PaymentsDevUser1:CleanAir99@dev2.paycleanairzonecharge.co.uk
  #   commands:
  #     - mkdir screenshots
  #     - /usr/local/bin/pa11y-ci -c pa11y/.pa11yci.conf.js
  #   when:
  #     event:
  #       - push


  ################################################# End DEV Steps #######################################################
---
  #################################################### ST env Steps ############################################################

kind: pipeline
type: docker
name: payments-web-st
trigger:
  branch:
    - iac-restructure-controlled-st
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock


steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker:19.03.11-git
    commands:
    - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker image
  - name: build
    image: docker:19.03.11-git
    commands:
    - docker build -f Dockerfile.test -t test-payments-frontend:latest --build-arg secret_key_base=${DRONE_COMMIT} .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    build_args:
      - AWS_REGION=eu-west-2

  # Trigger unit tests
  - name: unit tests
    image: test-payments-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - yarn install
      - rspec -f d

  # Execute integration/scenario tests
  - name: integration tests
    image: test-payments-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - cucumber

  # Invoke static code analysis through Ruby libraries and assets (js + stylesheets)
  - name: static code analysis (Ruby + assets)
    image: test-payments-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - rubocop
      - scss-lint app/javascript

  # Invoke security analysis through Ruby libraries
  - name: security tests (Ruby)
    image: test-payments-frontend
    pull: never
    commands:
       - bundle audit check --update
       - yarn run improved-yarn-audit --exclude '1486' --retry-on-network-failure
       - brakeman --except Redirect,LinkToHref
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Push built image to ECR registry
  - name: publish image to ecr
    image: plugins/ecr
    settings:
      access_key:
        from_secret: jaqu_controlled_service_aws_access_key_id
      secret_key:
        from_secret: jaqu_controlled_service_aws_secret_access_key
      repo: 311075478274.dkr.ecr.eu-west-2.amazonaws.com/payments-web
      registry: 311075478274.dkr.ecr.eu-west-2.amazonaws.com
      dockerfile: Dockerfile.build
      region: eu-west-2
      tags:
        - latest
        - ${DRONE_BUILD_NUMBER}
      build_args:
        - secret_key_base=${DRONE_COMMIT}
        - aws_region=eu-west-2
    when:
      event:
        - push

  - name: plan updates into st
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout iac_restructure_controlled
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select st || tf workspace new st
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select st || tf workspace new st
      - tf plan
      - cd ../04.web
      - tf init
      - tf workspace select st || tf workspace new st
      - tf plan
    environment:
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base:
         from_secret: payments_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-5
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
      TF_VAR_enable_https_redirect: false
      TF_VAR_feedback_url: https://www.surveymonkey.co.uk/r/TK6F8N6
    when:
      event:
        - push

  - name: provisioning warning
    image: docker:19.03.11-git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  - name: deploy to st
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - cd JAQU-CAZ-IAC
      - git checkout iac_restructure_controlled
      - cd terraform-iac/projects/payments/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select st || tf workspace new st
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select st || tf workspace new st
      - tf apply -auto-approve
      - cd ../04.web
      - tf init
      - tf workspace select st || tf workspace new st
      - tf apply -auto-approve
    environment:
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base:
         from_secret: payments_ruby_secret
      TF_VAR_google_analytics_id: UA-144774549-5
      TF_VAR_access_key:
        from_secret: jaqu_controlled_aws_access_key_id
      TF_VAR_secret_key:
        from_secret: jaqu_controlled_aws_secret_access_key
      TF_VAR_master_access_key:
        from_secret: jaqu_master_aws_access_key_id
      TF_VAR_master_secret_key:
        from_secret: jaqu_master_aws_secret_access_key
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCOUNT_NAME: jaqu-controlled
      GIT_PRIVATE_SSH:
        from_secret: jaqu_lower_github_private_key
      TF_VAR_enable_https_redirect: false
      TF_VAR_feedback_url: https://www.surveymonkey.co.uk/r/TK6F8N6
    when:
      event:
        - push

  - name: codedeploy ui st
    image: golang:alpine
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - mkdir ~/.aws
      - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
      - aws deploy create-deployment --application-name $APPLICATION_NAME --deployment-config-name CodeDeployDefault.ECSAllAtOnce --deployment-group-name $DEPLOYMENT_GROUP --description "Deployment ECS" --s3-location bucket=$LAMBDA_BUCKET,bundleType=yaml,key=$PROJECT/st/appspec.yaml --profile target_acc
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: jaqu_controlled_aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: jaqu_controlled_aws_secret_access_key
      AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
      AWS_DEFAULT_REGION: eu-west-2
      APPLICATION_NAME: payments-codedeploy-service-st
      DEPLOYMENT_GROUP: payments-codedeploy-service-st
      PROJECT: payments
      LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
    when:
      event:
        - push

  # Build docker image
  - name: await ecs rollout
    image: docker:19.03.11-git
    environment:
      build_id_url: https://st2.paycleanairzonecharge.co.uk/build_id
      build_id: ${DRONE_BUILD_NUMBER}
    commands:
      - apk add curl
      - sh build_utils/check_build_number.sh
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push

  ################################################# End ST Environment Steps #######################################################
---

#################################################### SIT Environment Steps ############################################################

  kind: pipeline
  type: docker
  name: payments-web-sit
  trigger:
    branch:
      - iac-restructure-controlled-sit
    event:
      - pull_request
      - push
  concurrency:
    limit: 1

  volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock


  steps:

    # Clean agent images and containers to prevent disk space overuse
    - name: clean agent
      image: docker:19.03.11-git
      commands:
      - docker system prune -f
      volumes:
        - name: docker_sock
          path: /var/run/docker.sock

    # Build docker image
    - name: build
      image: docker:19.03.11-git
      commands:
      - docker build -f Dockerfile.test -t test-payments-frontend:latest --build-arg secret_key_base=${DRONE_COMMIT} .
      volumes:
        - name: docker_sock
          path: /var/run/docker.sock
      build_args:
        - AWS_REGION=eu-west-2

    # Trigger unit tests
    - name: unit tests
      image: test-payments-frontend
      pull: never
      volumes:
        - name: docker_sock
          path: /var/run/docker.sock
      commands:
        - yarn install
        - rspec -f d

    # Execute integration/scenario tests
    - name: integration tests
      image: test-payments-frontend
      pull: never
      volumes:
        - name: docker_sock
          path: /var/run/docker.sock
      commands:
        - cucumber

    # Invoke static code analysis through Ruby libraries and assets (js + stylesheets)
    - name: static code analysis (Ruby + assets)
      image: test-payments-frontend
      pull: never
      volumes:
        - name: docker_sock
          path: /var/run/docker.sock
      commands:
        - rubocop
        - scss-lint app/javascript

    # Invoke security analysis through Ruby libraries
    - name: security tests (Ruby)
      image: test-payments-frontend
      pull: never
      commands:
         - bundle audit check --update
         - yarn run improved-yarn-audit --exclude '1486' --retry-on-network-failure
         - brakeman --except Redirect,LinkToHref
      volumes:
        - name: docker_sock
          path: /var/run/docker.sock

    # Push built image to ECR registry
    - name: publish image to ecr
      image: plugins/ecr
      settings:
        access_key:
          from_secret: jaqu_controlled_service_aws_access_key_id
        secret_key:
          from_secret: jaqu_controlled_service_aws_secret_access_key
        repo: 311075478274.dkr.ecr.eu-west-2.amazonaws.com/payments-web
        registry: 311075478274.dkr.ecr.eu-west-2.amazonaws.com
        dockerfile: Dockerfile.build
        region: eu-west-2
        tags:
          - release
          - ${DRONE_BUILD_NUMBER}
        build_args:
          - secret_key_base=${DRONE_COMMIT}
          - aws_region=eu-west-2
      when:
        event:
          - push

    - name: plan updates into sit
      image: hashicorp/terraform:0.12.3
      commands:
        - apk update && apk add bash
        - mkdir ~/.ssh
        - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - touch ~/.ssh/known_hosts
        - chmod 600 ~/.ssh/known_hosts
        - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
        - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
        - cd JAQU-CAZ-IAC
        - git checkout iac_restructure_controlled
        - cd terraform-iac/projects/payments/layers/01.networking
        - PATH=$PATH:../../../../bin/
        - chmod +x ../../../../bin/tf
        - tf init
        - tf workspace select sit || tf workspace new sit
        - tf plan
        - cd ../02.backends
        - tf init
        - tf workspace select sit || tf workspace new sit
        - tf plan
        - cd ../04.web
        - tf init
        - tf workspace select sit || tf workspace new sit
        - tf plan
      environment:
        TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
        TF_VAR_secret_key_base:
           from_secret: payments_ruby_secret
        TF_VAR_google_analytics_id: UA-144774549-5
        TF_VAR_access_key:
          from_secret: jaqu_controlled_aws_access_key_id
        TF_VAR_secret_key:
          from_secret: jaqu_controlled_aws_secret_access_key
        TF_VAR_master_access_key:
          from_secret: jaqu_master_aws_access_key_id
        TF_VAR_master_secret_key:
          from_secret: jaqu_master_aws_secret_access_key
        AWS_ACCESS_KEY_ID:
          from_secret: jaqu_controlled_aws_access_key_id
        AWS_SECRET_ACCESS_KEY:
          from_secret: jaqu_controlled_aws_secret_access_key
        AWS_DEFAULT_REGION: eu-west-2
        AWS_ACCOUNT_NAME: jaqu-controlled
        GIT_PRIVATE_SSH:
          from_secret: jaqu_lower_github_private_key
        TF_VAR_enable_https_redirect: false
        TF_VAR_feedback_url: https://www.surveymonkey.co.uk/r/TK6F8N6
      when:
        event:
          - pull_request

    - name: provisioning warning
      image: docker:19.03.11-git
      commands:
        - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
      when:
        status:
          - failure

    - name: deploy to sit
      image: hashicorp/terraform:0.12.3
      commands:
        - apk update && apk add bash
        - mkdir ~/.ssh
        - echo -e "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - touch ~/.ssh/known_hosts
        - chmod 600 ~/.ssh/known_hosts
        - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
        - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
        - cd JAQU-CAZ-IAC
        - git checkout iac_restructure_controlled
        - cd terraform-iac/projects/payments/layers/01.networking
        - PATH=$PATH:../../../../bin/
        - chmod +x ../../../../bin/tf
        - tf init
        - tf workspace select sit || tf workspace new sit
        - tf apply -auto-approve
        - cd ../02.backends
        - tf init
        - tf workspace select sit || tf workspace new sit
        - tf apply -auto-approve
        - cd ../04.web
        - tf init
        - tf workspace select sit || tf workspace new sit
        - tf apply -auto-approve
      environment:
        TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
        TF_VAR_secret_key_base:
           from_secret: payments_ruby_secret
        TF_VAR_google_analytics_id: UA-144774549-5
        TF_VAR_access_key:
          from_secret: jaqu_controlled_aws_access_key_id
        TF_VAR_secret_key:
          from_secret: jaqu_controlled_aws_secret_access_key
        TF_VAR_master_access_key:
          from_secret: jaqu_master_aws_access_key_id
        TF_VAR_master_secret_key:
          from_secret: jaqu_master_aws_secret_access_key
        AWS_ACCESS_KEY_ID:
          from_secret: jaqu_controlled_aws_access_key_id
        AWS_SECRET_ACCESS_KEY:
          from_secret: jaqu_controlled_aws_secret_access_key
        AWS_DEFAULT_REGION: eu-west-2
        AWS_ACCOUNT_NAME: jaqu-controlled
        GIT_PRIVATE_SSH:
          from_secret: jaqu_lower_github_private_key
        TF_VAR_enable_https_redirect: false
        TF_VAR_feedback_url: https://www.surveymonkey.co.uk/r/TK6F8N6
      when:
        event:
          - push

    - name: codedeploy ui sit
      image: golang:alpine
      commands:
        - apk add --update bash python python-dev py-pip build-base jq
        - pip install awscli
        - mkdir ~/.aws
        - echo -e "[profile target_acc]\nrole_arn = $AWS_ACCOUNT_ROLE\ncredential_source = Environment\nrole_session_name = AWSACCOUNT" > ~/.aws/config
        - aws deploy create-deployment --application-name $APPLICATION_NAME --deployment-config-name CodeDeployDefault.ECSAllAtOnce --deployment-group-name $DEPLOYMENT_GROUP --description "Deployment ECS" --s3-location bucket=$LAMBDA_BUCKET,bundleType=yaml,key=$PROJECT/st/appspec.yaml --profile target_acc
      environment:
        AWS_ACCESS_KEY_ID:
          from_secret: jaqu_controlled_aws_access_key_id
        AWS_SECRET_ACCESS_KEY:
          from_secret: jaqu_controlled_aws_secret_access_key
        AWS_ACCOUNT_ROLE: arn:aws:iam::072187228077:role/jaqu-controlledServiceRole
        AWS_DEFAULT_REGION: eu-west-2
        APPLICATION_NAME: payments-codedeploy-service-sit
        DEPLOYMENT_GROUP: payments-codedeploy-service-sit
        PROJECT: payments
        LAMBDA_BUCKET: jaqu-shared-project-lambda-bucket
      when:
        event:
          - push

    # Build docker image
    - name: await ecs rollout
      image: docker:19.03.11-git
      environment:
        build_id_url: https://sit2.paycleanairzonecharge.co.uk/build_id
        build_id: ${DRONE_BUILD_NUMBER}
      commands:
        - apk add curl
        - sh build_utils/check_build_number.sh
      volumes:
        - name: docker_sock
          path: /var/run/docker.sock
      when:
        event:
          - push

    ################################################# End  SIT Environment Steps #######################################################

  ################################################ Secrets #########################################################

# Note the below values are pulled from AWS Secrets Manager via the aws-secrets Drone plugin
---
kind: secret
name: jaqu_lower_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsLowerAccessKeyId

---
kind: secret
name: jaqu_lower_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsLowerSecretAccessKey


---
kind: secret
name: jaqu_lower_service_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsLowerServiceAccessKeyId

---
kind: secret
name: jaqu_lower_service_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsLowerServiceSecretAccessKey

---
kind: secret
name: jaqu_controlled_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsControlledAccessKeyId

---
kind: secret
name: jaqu_controlled_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsControlledSecretAccessKey


---
kind: secret
name: jaqu_controlled_service_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsControlledServiceAccessKeyId

---
kind: secret
name: jaqu_controlled_service_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsControlledServiceSecretAccessKey

---
kind: secret
name: jaqu_master_aws_access_key_id
get:
  path: /build-tools/drone
  name: awsMasterAccessKeyId

---
kind: secret
name: jaqu_master_aws_secret_access_key
get:
  path: /build-tools/drone
  name: awsMasterSecretAccessKey

---
kind: secret
name: jaqu_lower_sonar_host
get:
  path: /build-tools/drone
  name: sonarHost

---
kind: secret
name: jaqu_lower_sonar_token
get:
  path: /build-tools/drone
  name: sonarToken

---
kind: secret
name: jaqu_lower_github_private_key
get:
  path: /build-tools/drone
  name: githubPrivateKey

---
kind: secret
name: browserstack_auth_key
get:
  path: /build-tools/drone
  name: browserStackAuthKey

---
kind: secret
name: browserstack_username
get:
  path: /build-tools/drone
  name: browserStackUsername

---
kind: secret
name: payments_ruby_secret
get:
  path: /build-tools/drone
  name: paymentsRubySecret
  ################################################ End Secrets #########################################################
